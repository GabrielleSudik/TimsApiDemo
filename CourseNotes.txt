The API Project

Started with a .Net Web App, Core 3.1, API.

Note the boilerplate starts with a WeatherForecast example code.
When you launch, your browser will open with some dummy
weather info (json) at https://localhost:5001/weatherforecast. 
We'll delete WeatherForecast for our class.
Before we do... Check out the Properties for the project,
then Debug tab. Among other things, "Launch Browser" is set to
"weatherforecast", just like the last part of the URL above.
Later, we'll need to change this value to our new work.

-- Add the DLL / Common Project --

Copy the .dll from the Library project, paste it here.
Add it as a reference. Add THIS COPY, not the one in Library.
Then paste the referenes from Library project here too.
In the .csproj file. (Note it seems to open when you select the project.)

-- Configure DI --

Startup.cs -- Configure(): Add the services.Stuff there.

-- Add the Connection String --

appsettings.json. Add:

  "ConnectionStrings": {
    "Default": "Data Source=(local) ... etc"

Remember the value comes from checking SQL Server Obj Explorer,
and the properties for the TimsDinerDB. ConnetionString value.

-- Routing --

Startup.cs - Configure().
There is no redirect to error pages like the other project.
And the mapping controllers don't have typical paths.
Instead, the routes are set in the controllers instead of 
app.UseEndpoints() the way the other projects do.
More on this in later lessons...

-- Creating Data --

Controllers folder -- new controller -- API Controller - Empty.
OrderController.cs comes with:

    [Route("api/[controller]")]
    [ApiController]

See notes there.

Also: Controllers folder -- new class:
ValidateModelAttribute.
We created this as a way of validating models, which isn't as
straightforward in APIs as in UI projects.
We put it in that folder because we'll want to use it 
for all controllers.

Once you've got the code ready, open up Postman.
Normally, you just start the project in the browser, then
add your route. Eg: https://localhost:5001/api/order

But you'll get a page not found message because that will try 
to run a GET instead of POST. That's (part of) why you
need Postman. Turn off Certifications and SSL Certifications.

In Postman, navigate to New Request. It'll say Untitled Request.
At the top, it will have GET/POST/etc dropdown and a URL bar.

To test this code, select POST and put in the URL.
Since it's a POST, we also need to send some data. 
So tab to "Body" click "raw" and dropdown "json".
Then add your body, like so:

{
	"orderName": "Rick",
	"foodId": 3,
	"quantity": 4
}

Remember there is more in the model than these 3 things,
but these 3 are all we need to create an order.

Hit SEND. If you did things right, you'll get
Status: 200 and in the Response Body, something like 11003
(ie, the id of the new order). Yay.
Or even better, { "id": 11004 } when you updated what gets returned.

-- Reading Data --

OrderController.cs - new GET method. See notes there.

In Postman, try GET and https://localhost:5001/api/order/11004
You'll get the expected info in the Response Body:

{
    "order": {
        "id": 11004,
        "orderName": "Rick",
        "orderDate": "2020-06-13T23:26:06.8533333",
        "foodId": 3,
        "quantity": 4,
        "total": 63.8
    },
    "itemPurchased": "Sashimi Plate"
}

FYI, since this is a GET, you could have run it in the browser too.
Postman is needed for everything except GET.

New controller -- FoodController.cs.
See you notes there.

In Postman: GET https://localhost:5001/api/food
No URL or body params needed.
You'll get:

[
    {
        "id": 1,
        "title": "Bento Box",
        "description": "Eel, seaweed salad, rice, tempura",
        "price": 9.95
    },
    {
        "id": 2,
        "title": "Sushi Plate",
        "description": "8 pieces - Chef choice",
        "price": 12.95
    },
    {
        "id": 3,
        "title": "Sashimi Plate",
        "description": "Salmon, yellowtail, tuna",
        "price": 15.95
    }
]


-- Updating Data --

We'll create a new model to represent stuff that gets returned.
New folder Models - new class OrderUpdateModel.

OrderController.cs - new method Put().

In Postman, run a PUT https://localhost:5001/api/order.
In the body (raw/json): pass the id of the order to update
and the new name you want:

{
	"id": 12002,
	"orderName": "Don"
}

To check, use GET https://localhost:5001/api/order/12002
and you'll see the new name in the Response body:

"orderName": "Don", //etc

-- Deleting Data --

OrderController.cs - new method - Delete()

In Postman: DELETE https://localhost:5001/api/order/12002
You'll get the status 200.
If you run the GET for this id, you'll get status 404 Not Found.

-- Deploying --

Again, you're skipping this because you're not set up for it.

-- Enabling CORS --

Cross Origin Resource Sharing: How APIs tell the world
who they will share info with. It can be set to talk to anyone,
but usually/often they are limited.

Startup.cs:

services.AddCors() stuff.
app.UseCors() too.

There's also an issue with your published app not being
able to do PUTs and DELETEs. In that publication directory, 
there's a file "web.config". 
You'll need to add some extra lines of code there:

<system.webServer>
    <modules runAllManagedModulesForAllRequests="false">
        <remove name="WebDAVModule" />
    </modules>
</system.webServer>

Note republishing will overwrite your manual changes,
so you may need to do this again. I don't know what this all means, btw.
(Note you didn't actually do this because you haven't
published/deployed the app.)

--- End of Section ---